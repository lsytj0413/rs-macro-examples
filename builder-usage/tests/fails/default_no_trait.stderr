warning: type `__notDefautlAssertion` should have an upper camel case name
 --> tests/fails/default_no_trait.rs:8:5
  |
8 |     not: DoesNotImplementDefault
  |     ^^^ help: convert the identifier to upper camel case: `NotDefautlAssertion`
  |
  = note: `#[warn(non_camel_case_types)]` on by default

error[E0277]: the trait bound `DoesNotImplementDefault: Default` is not satisfied
 --> tests/fails/default_no_trait.rs:8:10
  |
8 |     not: DoesNotImplementDefault
  |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `DoesNotImplementDefault`
  |
  = help: see issue #48214
help: consider annotating `DoesNotImplementDefault` with `#[derive(Default)]`
  |
3 + #[derive(Default)]
4 | struct DoesNotImplementDefault;
  |

error[E0277]: the trait bound `DoesNotImplementDefault: Default` is not satisfied
 --> tests/fails/default_no_trait.rs:5:10
  |
5 | #[derive(Builder)]
  |          ^^^^^^^ the trait `Default` is not implemented for `DoesNotImplementDefault`
  |
note: required by a bound in `Option::<T>::unwrap_or_default`
 --> $RUST/core/src/option.rs
  |
  |     pub fn unwrap_or_default(self) -> T
  |            ----------------- required by a bound in this associated function
  |     where
  |         T: Default,
  |            ^^^^^^^ required by this bound in `Option::<T>::unwrap_or_default`
  = note: this error originates in the derive macro `Builder` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `DoesNotImplementDefault` with `#[derive(Default)]`
  |
3    + #[derive(Default)]
4    | struct DoesNotImplementDefault;
     |
